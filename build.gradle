plugins {
	id 'java'
	id 'eclipse'
	id 'application'
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	//id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "org.beryx.jlink" version "2.17.2"
	id 'org.javamodularity.moduleplugin' version '1.6.0'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.mocah'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

mainClassName = 'com.mocah.mindmath.server.ServerApplication'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

configurations {
	springAutoConfig { transitive = false }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.apache.derby:derby'
	
	springAutoConfig 'org.springframework.boot:spring-boot-autoconfigure'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

jar {
	enabled = true
}

jlink {
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	launcher {
		name = 'LaunchMindMath'
		/**/
		customImage {
			appModules = ['com.mocah.merged.module']
		}
		jvmArgs = [
			'--add-reads', 'com.mocah.merged.module=com.mocah.mindmath',
			'-cp', '../app/*'
		]
		/**/
	}
	/**/
	mergedModule {
		additive = true
		uses 'ch.qos.logback.classic.spi.Configurator'
		uses 'javax.validation.valueextraction.ValueExtractor'
		uses 'javax.validation.ConstraintValidator'
		uses 'org.hibernate.integrator.spi.Integrator'
		uses 'org.hibernate.boot.registry.selector.StrategyRegistrationProvider'
		excludeProvides implementation: 'com.sun.xml.bind.v2.ContextFactory'
		excludeProvides servicePattern: 'javax.enterprise.*'
	}
	jpackage {
		imageName = 'MindMath'
		skipInstaller = true
		installerName = 'MindMathInstaller'
		installerType = 'pkg'
	}
	
	forceMerge 'jackson', 'log4j'
	/**/
}

prepareMergedJarsDir.doLast {
	// extract META-INF/spring.factories from spring-boot-autoconfigure
	copy {
		from zipTree(configurations.springAutoConfig.singleFile).matching {
			include 'META-INF/spring.factories'
		}
		into jlinkBasePath
	}

	// insert META-INF/spring.factories into the main jar
	ant.zip(update: "true", destfile: jar.archivePath, keepcompression: true) {
		fileset(dir: "$jlinkBasePath", includes: 'META-INF/**')
	}
}

eclipse {
	classpath {
		containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
		file {
			whenMerged {
				entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
					it.entryAttributes['module'] = 'true'
				}
				entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
					it.entryAttributes['module'] = 'true'
				}
			}
		}
	}
}
