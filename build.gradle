plugins {
	id 'java'
	id 'eclipse'
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "org.beryx.jlink" version "2.17.2"
	id 'org.javamodularity.moduleplugin' version '1.6.0'
}

group = 'com.mocah'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	//implementation 'org.springframework.boot:spring-boot-dependencies:2.2.4.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.apache.derby:derby'
	
	//implementation 'com.fasterxml.jackson.core:jackson-core'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

jar {
    enabled = true
}

bootJar {
  enabled = false
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'LaunchMindMath'
        /**/
        customImage {
            appModules = ['com.mocah.merged.module']
        }
        jvmArgs = [
            '--add-reads', 'com.mocah.merged.module=com.mocah.mindmath',
            '-cp', '../app/*'
        ]
        /**/
    }
    /**/
    mergedModule {
        additive = true
        uses 'ch.qos.logback.classic.spi.Configurator'
    }
    jpackage {
        imageName = 'MindMath'
        skipInstaller = true
        installerName = 'MindMathInstaller'
        installerType = 'pkg'
    }
    forceMerge('log4j-api')
    /**/
}

mainClassName = 'com.mocah.mindmath/server.ServerApplication'

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }

            }
        }
    }
}
